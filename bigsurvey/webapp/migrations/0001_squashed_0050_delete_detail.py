# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import datetime
from decimal import Decimal
import ckeditor.fields
from django.conf import settings
import webapp.utils.photo_util
import webapp.fields


class Migration(migrations.Migration):

    replaces = [(b'webapp', '0001_initial'), (b'webapp', '0002_auto_20150504_1025'), (b'webapp', '0003_auto_20150505_0905'), (b'webapp', '0004_auto_20150505_0914'), (b'webapp', '0005_auto_20150505_1108'), (b'webapp', '0006_auto_20150506_0456'), (b'webapp', '0007_auto_20150506_0531'), (b'webapp', '0005_auto_20150505_1008'), (b'webapp', '0006_auto_20150505_1025'), (b'webapp', '0007_auto_20150505_1027'), (b'webapp', '0008_merge'), (b'webapp', '0009_auto_20150508_0608'), (b'webapp', '0009_auto_20150508_0553'), (b'webapp', '0010_merge'), (b'webapp', '0011_auto_20150512_1132'), (b'webapp', '0012_auto_20150512_1155'), (b'webapp', '0011_auto_20150512_0639'), (b'webapp', '0012_auto_20150512_0642'), (b'webapp', '0013_merge'), (b'webapp', '0014_importprogress'), (b'webapp', '0015_test_paid'), (b'webapp', '0016_auto_20150522_0739'), (b'webapp', '0017_pws_price'), (b'webapp', '0018_auto_20150609_0648'), (b'webapp', '0019_auto_20150612_0545'), (b'webapp', '0020_auto_20150615_0714'), (b'webapp', '0019_auto_20150612_0857'), (b'webapp', '0020_auto_20150612_1130'), (b'webapp', '0021_merge'), (b'webapp', '0022_auto_20150615_0923'), (b'webapp', '0021_pws_logo'), (b'webapp', '0023_merge'), (b'webapp', '0024_auto_20150616_0953'), (b'webapp', '0025_importlog'), (b'webapp', '0026_importlog_pws'), (b'webapp', '0027_auto_20150622_0928'), (b'webapp', '0028_auto_20150622_1003'), (b'webapp', '0029_merge'), (b'webapp', '0030_auto_20150624_1202'), (b'webapp', '0031_auto_20150626_0517'), (b'webapp', '0032_auto_20150701_0828'), (b'webapp', '0033_auto_20150702_0425'), (b'webapp', '0034_test_user'), (b'webapp', '0035_employee_has_licence_for_installation'), (b'webapp', '0036_test_paypal_payment_id'), (b'webapp', '0037_auto_20150708_0736'), (b'webapp', '0037_auto_20150708_0708'), (b'webapp', '0038_merge'), (b'webapp', '0039_auto_20150708_1057'), (b'webapp', '0039_auto_20150708_1031'), (b'webapp', '0040_merge'), (b'webapp', '0041_auto_20150709_0711'), (b'webapp', '0042_pws_state'), (b'webapp', '0043_auto_20150713_0516'), (b'webapp', '0044_auto_20150713_0929'), (b'webapp', '0045_delete_bptype'), (b'webapp', '0046_auto_20150715_1223'), (b'webapp', '0047_auto_20150716_0438'), (b'webapp', '0048_auto_20150716_0822'), (b'webapp', '0049_auto_20150716_1107'), (b'webapp', '0050_delete_detail')]

    dependencies = [
        ('auth', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AssemblyLocation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('assembly_location', models.CharField(max_length=20, verbose_name='Assembly Location')),
            ],
            options={
                'ordering': ('assembly_location',),
                'verbose_name': 'Assembly Location',
                'verbose_name_plural': 'Assembly Locations',
                'permissions': (('browse_assemblylocation', 'Can browse Assembly Location'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AssemblyStatus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('assembly_status', models.CharField(max_length=20, verbose_name='Assembly Status')),
            ],
            options={
                'ordering': ('assembly_status',),
                'verbose_name': 'Assembly Status',
                'verbose_name_plural': 'Assembly Statuses',
                'permissions': (('browse_assemblystatus', 'Can browse Assembly Status'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='BPManufacturer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bp_manufacturer', models.CharField(max_length=30, verbose_name='BFP Manufacturer')),
            ],
            options={
                'ordering': ('bp_manufacturer',),
                'verbose_name': 'BFP Manufacturer',
                'verbose_name_plural': 'BFP Manufacturers',
                'permissions': (('browse_bpmanufacturer', 'Can browse BP Manufacturer'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='BPSize',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bp_size', models.CharField(max_length=10, verbose_name='BFP Size')),
            ],
            options={
                'ordering': ('bp_size',),
                'verbose_name': 'BFP Size',
                'verbose_name_plural': 'BFP Sizes',
                'permissions': (('browse_bpsize', 'Can browse BP Size'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CustomerCode',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('customer_code', models.CharField(max_length=20, verbose_name='Customer Code')),
            ],
            options={
                'ordering': ('customer_code',),
                'verbose_name': 'Customer Code',
                'verbose_name_plural': 'Customer Codes',
                'permissions': (('browse_customercode', 'Can browse Customer Code'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('address', models.CharField(max_length=50, null=True, verbose_name='Address', blank=True)),
                ('city', models.CharField(max_length=30, null=True, verbose_name='City', blank=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True, verbose_name='State', choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'DC', b'District of Columbia'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('zip', models.CharField(max_length=10, null=True, verbose_name='ZIP', blank=True)),
                ('phone1', models.CharField(max_length=20, null=True, verbose_name='Phone 1', blank=True)),
                ('phone2', models.CharField(max_length=20, null=True, verbose_name='Phone 2', blank=True)),
                ('cert_number', models.CharField(max_length=30, null=True, verbose_name='Cert. Number', blank=True)),
                ('cert_date', models.DateField(null=True, verbose_name='Cert. Date', blank=True)),
                ('cert_expires', models.DateField(null=True, verbose_name='Cert. Expires', blank=True)),
                ('test_last_cert', models.DateField(null=True, verbose_name='Last Cert.', blank=True)),
                ('company', models.CharField(max_length=30, null=True, verbose_name='Company', blank=True)),
                ('test_serial', models.CharField(max_length=20, null=True, verbose_name='Test Serial', blank=True)),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
                'permissions': (('browse_user', 'Can browse Users'), ('access_to_adminpanel', 'Can log into Admin Panel'), ('access_to_all_users', 'Has access to all Users'), ('access_to_pws_users', "Has access to PWS's Users")),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FloorsCount',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('floors_count', models.CharField(max_length=10, verbose_name='Floors Count')),
            ],
            options={
                'ordering': ('floors_count',),
                'verbose_name': 'Floors Count',
                'verbose_name_plural': 'Floors Count',
                'permissions': (('browse_floorscount', 'Can browse Floors Count'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Hazard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('location1', models.CharField(max_length=70, null=True, verbose_name='Location 1', blank=True)),
                ('location2', models.CharField(max_length=70, null=True, verbose_name='Location 2', blank=True)),
                ('installed_properly', models.BooleanField(default=False, verbose_name='Installed Properly', choices=[(True, b'Yes'), (False, b'No')])),
                ('installer', models.CharField(max_length=30, null=True, verbose_name='Installer', blank=True)),
                ('install_date', models.DateField(null=True, verbose_name='Install Date', blank=True)),
                ('replace_date', models.DateField(null=True, verbose_name='Replace Date', blank=True)),
                ('model_no', models.CharField(max_length=15, null=True, verbose_name='BP Model No.', blank=True)),
                ('serial_no', models.CharField(max_length=15, null=True, verbose_name='BP Serial No.', blank=True)),
                ('due_install_test_date', models.DateField(null=True, verbose_name='Due Install/Test Date', blank=True)),
                ('is_present', models.BooleanField(default=True, verbose_name='Is Present On Site')),
                ('notes', models.TextField(max_length=255, null=True, verbose_name='Notes', blank=True)),
                ('assembly_location', models.ForeignKey(related_name='hazards', verbose_name='Assembly Location', blank=True, to='webapp.AssemblyLocation', null=True)),
                ('assembly_status', models.ForeignKey(related_name='hazards', verbose_name='Assembly Status', blank=True, to='webapp.AssemblyStatus', null=True)),
                ('bp_size', models.ForeignKey(related_name='hazards', verbose_name='BP Size', blank=True, to='webapp.BPSize', null=True)),
            ],
            options={
                'verbose_name': 'Hazard',
                'verbose_name_plural': 'Hazards',
                'permissions': (('browse_hazard', 'Can browse Hazard'), ('access_to_all_hazards', 'Has access to all Hazards'), ('access_to_pws_hazards', "Has access to PWS's Hazards"), ('change_all_info_about_hazard', 'Can change all information about Hazard')),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='HazardType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('hazard_type', models.CharField(max_length=50, verbose_name='Hazard Type')),
            ],
            options={
                'ordering': ('hazard_type',),
                'verbose_name': 'Hazard Type',
                'verbose_name_plural': 'Hazard Types',
                'permissions': (('browse_hazardtype', 'Can browse Hazard Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ICPointType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ic_point', models.CharField(max_length=20, verbose_name='Interconnection Point')),
            ],
            options={
                'ordering': ('ic_point',),
                'verbose_name': 'Interconnection Point Type',
                'verbose_name_plural': 'Interconnection Point Types',
                'permissions': (('browse_icpointtype', 'Can browse Interconnection Point Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Letter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField(auto_now_add=True, verbose_name='Send Date')),
            ],
            options={
                'verbose_name': 'Letter',
                'verbose_name_plural': 'Letters',
                'permissions': (('browse_letter', 'Can browse Letter'), ('send_letter', 'Can send Letter')),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LetterType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('letter_type', models.CharField(max_length=20, verbose_name='Letter Type')),
                ('template', ckeditor.fields.RichTextField(default='Default Letter Template', verbose_name='Letter Template')),
                ('header', models.CharField(default='Backflow Prevention Services Notification', max_length=150, verbose_name='Letter Header')),
            ],
            options={
                'ordering': ('letter_type',),
                'verbose_name': 'Letter Type',
                'verbose_name_plural': 'Letter Types',
                'permissions': (('browse_lettertype', 'Can browse Letter Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Orientation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('orientation', models.CharField(max_length=15, verbose_name='Orientation')),
            ],
            options={
                'ordering': ('orientation',),
                'verbose_name': 'Orientation Type',
                'verbose_name_plural': 'Orientation Types',
                'permissions': (('browse_orientation', 'Can browse Orientation Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PWS',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('number', models.CharField(max_length=15, verbose_name='Number')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('city', models.CharField(max_length=30, null=True, verbose_name='City', blank=True)),
                ('office_address', models.CharField(max_length=50, null=True, verbose_name='Office Address', blank=True)),
                ('notes', models.TextField(max_length=255, null=True, verbose_name='Notes', blank=True)),
            ],
            options={
                'ordering': ('number',),
                'verbose_name': 'Public Water System',
                'verbose_name_plural': 'Public Water Systems',
                'permissions': (('browse_pws', 'Can browse Public Water System'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('service_type', models.CharField(max_length=20, verbose_name='Service Type')),
            ],
            options={
                'ordering': ('service_type',),
                'verbose_name': 'Service Type',
                'verbose_name_plural': 'Service Types',
                'permissions': (('browse_servicetype', 'Can browse Service Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('connect_date', models.DateField(null=True, verbose_name='Connect Date', blank=True)),
                ('address1', models.CharField(max_length=100, verbose_name='Address 1')),
                ('address2', models.CharField(max_length=100, null=True, verbose_name='Address 2', blank=True)),
                ('street_number', models.CharField(max_length=100, null=True, verbose_name='Street Number', blank=True)),
                ('apt', models.CharField(max_length=15, null=True, verbose_name='Apt', blank=True)),
                ('city', models.CharField(max_length=30, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=2, null=True, verbose_name='State', choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'DC', b'District of Columbia'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('zip', models.CharField(max_length=10, null=True, verbose_name='ZIP', blank=True)),
                ('meter_number', models.CharField(max_length=20, null=True, verbose_name='Meter Number', blank=True)),
                ('meter_size', models.CharField(max_length=15, null=True, verbose_name='Meter Size', blank=True)),
                ('meter_reading', models.FloatField(null=True, verbose_name='Meter Reading', blank=True)),
                ('route', models.CharField(max_length=20, null=True, verbose_name='Seq. Route', blank=True)),
                ('potable_present', models.BooleanField(default=False, verbose_name='Potable Present', choices=[(True, b'Yes'), (False, b'No')])),
                ('fire_present', models.BooleanField(default=False, verbose_name='Fire Present', choices=[(True, b'Yes'), (False, b'No')])),
                ('irrigation_present', models.BooleanField(default=False, verbose_name='Irrigation Present', choices=[(True, b'Yes'), (False, b'No')])),
                ('is_due_install', models.BooleanField(default=False, verbose_name='Is Due Install', choices=[(True, b'Yes'), (False, b'No')])),
                ('is_backflow', models.BooleanField(default=False, verbose_name='Is Backflow Present', choices=[(True, b'Yes'), (False, b'No')])),
                ('next_survey_date', models.DateField(null=True, verbose_name='Next Survey Date', blank=True)),
                ('notes', models.TextField(max_length=255, null=True, verbose_name='Notes', blank=True)),
                ('last_survey_date', models.DateField(null=True, verbose_name='Last survey date', blank=True)),
                ('cust_number', models.CharField(max_length=15, verbose_name='Number')),
                ('cust_name', models.CharField(max_length=50, verbose_name='Name')),
                ('cust_address1', models.CharField(max_length=100, null=True, verbose_name='Address 1', blank=True)),
                ('cust_address2', models.CharField(max_length=100, null=True, verbose_name='Address 2', blank=True)),
                ('cust_apt', models.CharField(max_length=15, null=True, verbose_name='Customer Apt', blank=True)),
                ('cust_city', models.CharField(max_length=30, null=True, verbose_name='City', blank=True)),
                ('cust_state', models.CharField(blank=True, max_length=2, null=True, verbose_name='State', choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'DC', b'District of Columbia'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('cust_zip', models.CharField(max_length=10, null=True, verbose_name='ZIP', blank=True)),
                ('contact_phone', models.CharField(max_length=15, null=True, verbose_name='Phone', blank=True)),
                ('contact_fax', models.CharField(max_length=15, null=True, verbose_name='Fax', blank=True)),
                ('contact_email', models.EmailField(max_length=15, null=True, verbose_name='Email', blank=True)),
                ('cust_code', models.ForeignKey(related_name='customers', verbose_name='Customer Code', to='webapp.CustomerCode')),
                ('floors', models.ForeignKey(related_name='sites', verbose_name='Building Height', blank=True, to='webapp.FloorsCount', null=True)),
                ('interconnection_point', models.ForeignKey(related_name='sites', verbose_name='Interconnection Point', blank=True, to='webapp.ICPointType', null=True)),
                ('pws', models.ForeignKey(related_name='sites', verbose_name='PWS', to='webapp.PWS')),
            ],
            options={
                'verbose_name': 'Site',
                'verbose_name_plural': 'Sites',
                'permissions': (('browse_site', 'Can browse Site'), ('access_to_all_sites', 'Has access to all Sites'), ('access_to_pws_sites', "Has access to PWS's Sites"), ('access_to_import', 'Can import Sites from Excel file'), ('access_to_batch_update', 'Has access to batch update'), ('change_all_info_about_site', 'Can change all information about Site')),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SiteStatus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site_status', models.CharField(max_length=15, verbose_name='Site Status')),
            ],
            options={
                'ordering': ('site_status',),
                'verbose_name': 'Site Status',
                'verbose_name_plural': 'Site Status',
                'permissions': (('browse_sitestatus', 'Can browse Site Status'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site_type', models.CharField(max_length=50, verbose_name='Site Type')),
            ],
            options={
                'ordering': ('site_type',),
                'verbose_name': 'Site Type',
                'verbose_name_plural': 'Site Types',
                'permissions': (('browse_sitetype', 'Can browse Site Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SiteUse',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site_use', models.CharField(max_length=30, verbose_name='Site Use')),
            ],
            options={
                'ordering': ('site_use',),
                'verbose_name': 'Site Use',
                'verbose_name_plural': 'Site Use Types',
                'permissions': (('browse_siteuse', 'Can browse Site Use'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('source_type', models.CharField(max_length=50, verbose_name='Source Type')),
            ],
            options={
                'ordering': ('source_type',),
                'verbose_name': 'Source Type',
                'verbose_name_plural': 'Source Types',
                'permissions': (('browse_sourcetype', 'Can browse Source Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Special',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('special', models.CharField(max_length=5, verbose_name='Special')),
            ],
            options={
                'ordering': ('special',),
                'verbose_name': 'Special',
                'verbose_name_plural': 'Special',
                'permissions': (('browse_special', 'Can browse Special'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StaticText',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=20, verbose_name='Title')),
                ('text', ckeditor.fields.RichTextField(null=True, verbose_name='Text', blank=True)),
                ('group', models.ForeignKey(related_name='static_texts', verbose_name='Group', blank=True, to='auth.Group', null=True)),
            ],
            options={
                'verbose_name': 'Static Text',
                'verbose_name_plural': 'Static Text',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('survey_date', models.DateField(verbose_name='Survey Date')),
                ('metered', models.BooleanField(default=False, verbose_name='Metered', choices=[(True, b'Yes'), (False, b'No')])),
                ('pump_present', models.BooleanField(default=False, verbose_name='Pump Present', choices=[(True, b'Yes'), (False, b'No')])),
                ('additives_present', models.BooleanField(default=False, verbose_name='Additives Present', choices=[(True, b'Yes'), (False, b'No')])),
                ('cc_present', models.BooleanField(default=False, verbose_name='CC Present', choices=[(True, b'Yes'), (False, b'No')])),
                ('protected', models.BooleanField(default=False, verbose_name='Is Protected', choices=[(True, b'Yes'), (False, b'No')])),
                ('aux_water', models.BooleanField(default=False, verbose_name='Auxiliary Water', choices=[(True, b'Yes'), (False, b'No')])),
                ('detector_manufacturer', models.CharField(max_length=20, null=True, verbose_name='Detector Manufacturer', blank=True)),
                ('detector_model', models.CharField(max_length=20, null=True, verbose_name='Detector Model', blank=True)),
                ('detector_serial_no', models.CharField(max_length=20, null=True, verbose_name='Detector Serial No.', blank=True)),
                ('notes', models.TextField(max_length=255, null=True, verbose_name='Notes', blank=True)),
                ('hazards', models.ManyToManyField(related_name='surveys', null=True, verbose_name='Hazards', to=b'webapp.Hazard', blank=True)),
                ('service_type', models.ForeignKey(related_name='surveys', verbose_name='Service Type', to='webapp.ServiceType')),
                ('site', models.ForeignKey(related_name='surveys', verbose_name='Site', to='webapp.Site')),
                ('special', models.ForeignKey(related_name='surveys', verbose_name='Special', blank=True, to='webapp.Special', null=True)),
            ],
            options={
                'get_latest_by': 'survey_date',
                'verbose_name': 'Survey',
                'verbose_name_plural': 'Surveys',
                'permissions': (('browse_survey', 'Can browse Survey'), ('access_to_all_surveys', 'Has access to all Surveys'), ('access_to_pws_surveys', "Has access to PWS's Surveys"), ('access_to_own_surveys', 'Has access to own Surveys')),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SurveyType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('survey_type', models.CharField(max_length=20, verbose_name='Survey Type')),
            ],
            options={
                'ordering': ('survey_type',),
                'verbose_name': 'Survey Type',
                'verbose_name_plural': 'Survey Types',
                'permissions': (('browse_surveytype', 'Can browse Survey Type'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('test_date', models.DateField(auto_now_add=True, verbose_name='Test Date')),
                ('cv1_leaked', models.BooleanField(default=False, verbose_name='CV1 Leaked', choices=[(True, b'Leaked'), (False, b'Closed Tight')])),
                ('cv1_gauge_pressure', models.FloatField(null=True, verbose_name='CV1 Gauge Pressure', blank=True)),
                ('cv1_maintenance', models.BooleanField(default=False, verbose_name='CV1 Maintenance', choices=[(True, b'Yes'), (False, b'No')])),
                ('cv1_maintenance_pressure', models.FloatField(null=True, verbose_name='CV1 Maintenance Pressure', blank=True)),
                ('cv2_leaked', models.BooleanField(default=False, verbose_name='CV2 Leaked', choices=[(True, b'Leaked'), (False, b'Closed Tight')])),
                ('cv2_gauge_pressure', models.FloatField(null=True, verbose_name='CV2 Gauge Pressure', blank=True)),
                ('cv2_maintenance', models.BooleanField(default=False, verbose_name='CV2 Maintenance', choices=[(True, b'Yes'), (False, b'No')])),
                ('cv2_maintenance_pressure', models.FloatField(null=True, verbose_name='CV2 Maintenance Pressure', blank=True)),
                ('rv_opened', models.BooleanField(default=False, verbose_name='RV Opened', choices=[(True, b'Opened'), (False, b'Closed')])),
                ('rv_psi1', models.FloatField(null=True, verbose_name='RV Pressure 1', blank=True)),
                ('rv_psi2', models.FloatField(null=True, verbose_name='RV Pressure 2', blank=True)),
                ('rv_maintenance', models.BooleanField(default=False, verbose_name='RV Maintenance', choices=[(True, b'Yes'), (False, b'No')])),
                ('outlet_sov_leaked', models.BooleanField(default=False, verbose_name='Outlet SOV Leaked', choices=[(True, b'Leaked'), (False, b'Closed Tight')])),
                ('pvb_opened', models.BooleanField(default=False, verbose_name='PVB Opened', choices=[(True, b'Opened'), (False, b'Closed')])),
                ('pvb_open_pressure', models.FloatField(null=True, verbose_name='PVB Open Pressure', blank=True)),
                ('cv_leaked', models.BooleanField(default=False, verbose_name='CV Leaked', choices=[(True, b'Leaked'), (False, b'Closed Tight')])),
                ('cv_held_pressure', models.FloatField(null=True, verbose_name='CV Held Pressure', blank=True)),
                ('cv_maintenance', models.BooleanField(default=False, verbose_name='CV Maintenance', choices=[(True, b'Yes'), (False, b'No')])),
                ('air_inlet_opened', models.BooleanField(default=True, verbose_name='Air Inlet Opened', choices=[(True, b'Yes'), (False, b'No')])),
                ('air_inlet_psi', models.FloatField(null=True, verbose_name='Air Inlet PSI', blank=True)),
                ('cv_psi', models.FloatField(null=True, verbose_name='CV PSI', blank=True)),
                ('test_result', models.BooleanField(default=False, verbose_name='Test Result', choices=[(True, b'Passed'), (False, b'Failed')])),
                ('notes', models.TextField(max_length=255, null=True, verbose_name='Notes', blank=True)),
                ('bp_device', models.ForeignKey(related_name='tests', verbose_name='BP Device', to='webapp.Hazard')),
                ('tester', models.ForeignKey(related_name='tests', verbose_name='Tester', to=settings.AUTH_USER_MODEL)),
                ('cv1_cleaned', models.BooleanField(default=True, verbose_name='CV1 Cleaned or Replaced', choices=[(True, b'Cleaned only'), (False, b'Replaced')])),
                ('cv2_cleaned', models.BooleanField(default=True, verbose_name='CV2 Cleaned or Replaced', choices=[(True, b'Cleaned only'), (False, b'Replaced')])),
                ('pvb_cleaned', models.BooleanField(default=True, verbose_name='PVB Cleaned or Replaced', choices=[(True, b'Cleaned only'), (False, b'Replaced')])),
                ('rv_cleaned', models.BooleanField(default=True, verbose_name='RV Cleaned or Replaced', choices=[(True, b'Cleaned only'), (False, b'Replaced')])),
                ('paid', models.BooleanField(default=False, verbose_name='Was test paid?')),
                ('air_inlet_retest_psi', models.FloatField(null=True, verbose_name='Air Inlet Retest PSI', blank=True)),
                ('cv_retest_psi', models.FloatField(null=True, verbose_name='CV Retest PSI', blank=True)),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Tests',
                'permissions': (('browse_test', 'Can browse Test'), ('access_to_all_tests', 'Has access to all Tests'), ('access_to_pws_tests', "Has access to PWS's Tests"), ('access_to_own_tests', 'Has access to own Tests')),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TestManufacturer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('test_manufacturer', models.CharField(max_length=20, verbose_name='Test Manufacturer')),
            ],
            options={
                'ordering': ('test_manufacturer',),
                'verbose_name': 'Test Manufacturer',
                'verbose_name_plural': 'Test Manufacturers',
                'permissions': (('browse_testmanufacturer', 'Can browse Test Manufacturer'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('model', models.CharField(max_length=20, verbose_name='Test Model')),
            ],
            options={
                'ordering': ('model',),
                'verbose_name': 'Test Model',
                'verbose_name_plural': 'Test Models',
                'permissions': (('browse_testmodel', 'Can browse Test Models'),),
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='survey',
            name='survey_type',
            field=models.ForeignKey(related_name='surveys', verbose_name='Survey Type', blank=True, to='webapp.SurveyType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='survey',
            name='surveyor',
            field=models.ForeignKey(related_name='surveys', verbose_name='Surveyor', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='site',
            name='site_type',
            field=models.ForeignKey(related_name='sites', verbose_name='Site Type', blank=True, to='webapp.SiteType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='site',
            name='site_use',
            field=models.ForeignKey(related_name='sites', verbose_name='Site Use', blank=True, to='webapp.SiteUse', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='site',
            name='status',
            field=models.ForeignKey(related_name='sites', verbose_name='Status', blank=True, to='webapp.SiteStatus', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='water_source',
            field=models.ForeignKey(related_name='pws', verbose_name='Water Source', blank=True, to='webapp.SourceType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='letter',
            name='letter_type',
            field=models.ForeignKey(related_name='letters', verbose_name='Letter Type', to='webapp.LetterType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='letter',
            name='site',
            field=models.ForeignKey(related_name='letters', verbose_name='Site', blank=True, to='webapp.Site', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='letter',
            name='user',
            field=models.ForeignKey(related_name='letters', verbose_name='Sender', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='hazard_type',
            field=models.ForeignKey(related_name='hazards', verbose_name='Hazard Type', to='webapp.HazardType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='manufacturer',
            field=models.ForeignKey(related_name='hazards', verbose_name='BP Manufacturer', blank=True, to='webapp.BPManufacturer', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='orientation',
            field=models.ForeignKey(related_name='hazards', verbose_name='orientation', blank=True, to='webapp.Orientation', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='service_type',
            field=models.ForeignKey(related_name='hazards', verbose_name='Service Type', to='webapp.ServiceType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='site',
            field=models.ForeignKey(related_name='hazards', verbose_name='Site', to='webapp.Site'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='employee',
            name='pws',
            field=models.ForeignKey(related_name='employees', verbose_name='PWS', blank=True, to='webapp.PWS', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='employee',
            name='test_manufacturer',
            field=models.ForeignKey(related_name='testers', verbose_name='Test Manufacturer', blank=True, to='webapp.TestManufacturer', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='employee',
            name='test_model',
            field=models.ForeignKey(related_name='testers', verbose_name='Test Model', blank=True, to='webapp.TestModel', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.OneToOneField(to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='site',
            options={'verbose_name': 'Site', 'verbose_name_plural': 'Sites', 'permissions': (('browse_site', 'Can browse Site'), ('access_to_all_sites', 'Has access to all Sites'), ('access_to_pws_sites', "Has access to PWS's Sites"), ('access_to_site_by_customer_account', 'Has access to Site through Customer Account'), ('access_to_import', 'Can import Sites from Excel file'), ('access_to_batch_update', 'Has access to batch update'), ('change_all_info_about_site', 'Can change all information about Site'))},
        ),
        migrations.AddField(
            model_name='letter',
            name='hazard',
            field=models.ForeignKey(related_name='letters', verbose_name='Hazard', blank=True, to='webapp.Hazard', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='letter',
            name='rendered_body',
            field=models.TextField(null=True, verbose_name='Letter Content', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='contact_email',
            field=models.EmailField(max_length=30, null=True, verbose_name='Email', blank=True),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='letter',
            options={'verbose_name': 'Letter', 'verbose_name_plural': 'Letters', 'permissions': (('browse_letter', 'Can browse Letter'), ('send_letter', 'Can send Letter'), ('pws_letter_access', 'Has access to pws letters'))},
        ),
        migrations.AddField(
            model_name='letter',
            name='already_sent',
            field=models.BooleanField(default=False, verbose_name=b'Already Sent'),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='letter',
            options={'verbose_name': 'Letter', 'verbose_name_plural': 'Letters', 'permissions': (('browse_letter', 'Can browse Letter'), ('send_letter', 'Can send Letter'), ('pws_letter_access', 'Has access to pws letters'), ('full_letter_access', 'Has access to all letters'))},
        ),
        migrations.AlterField(
            model_name='site',
            name='address1',
            field=models.CharField(help_text='Main Address of Site', max_length=100, verbose_name='Address 1'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='address2',
            field=models.CharField(help_text='Secondary Address of Site if exists', max_length=100, null=True, verbose_name='Address 2', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='apt',
            field=models.CharField(help_text="Site Address's Apartment", max_length=15, null=True, verbose_name='Apt', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='city',
            field=models.CharField(help_text="Site's City", max_length=30, verbose_name='City'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='connect_date',
            field=models.DateField(help_text='Connection date of Site', null=True, verbose_name='Connect Date', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='contact_email',
            field=models.EmailField(help_text="Customer's Email Address", max_length=30, null=True, verbose_name='Email', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='contact_fax',
            field=models.CharField(help_text="Customer's Fax", max_length=15, null=True, verbose_name='Fax', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='contact_phone',
            field=models.CharField(help_text="Customer's Phone", max_length=15, null=True, verbose_name='Phone', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_address1',
            field=models.CharField(help_text="Customer's Main Address", max_length=100, null=True, verbose_name='Address 1', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_address2',
            field=models.CharField(help_text="Customer's Secondary Address (if exists)", max_length=100, null=True, verbose_name='Address 2', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_apt',
            field=models.CharField(help_text="Customer's Apartment", max_length=15, null=True, verbose_name='Customer Apt', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_city',
            field=models.CharField(help_text="Customer's City", max_length=30, null=True, verbose_name='City', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_code',
            field=models.ForeignKey(related_name='customers', verbose_name='Customer Code', to='webapp.CustomerCode', help_text="Customer's Code"),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_name',
            field=models.CharField(help_text="Customer's Name", max_length=50, verbose_name='Name'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_number',
            field=models.CharField(help_text="Customer's Number", max_length=15, verbose_name='Number'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_state',
            field=models.CharField(choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'DC', b'District of Columbia'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')], max_length=2, blank=True, help_text="Customer's State", null=True, verbose_name='State'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_zip',
            field=models.CharField(help_text="Customer's ZIP Code", max_length=10, null=True, verbose_name='ZIP', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='fire_present',
            field=models.BooleanField(default=False, help_text='Is Fire connection present', verbose_name='Fire Present', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='floors',
            field=models.ForeignKey(related_name='sites', blank=True, to='webapp.FloorsCount', help_text='Number of Floors', null=True, verbose_name='Building Height'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='interconnection_point',
            field=models.ForeignKey(related_name='sites', blank=True, to='webapp.ICPointType', help_text='Interconnection Point Type', null=True, verbose_name='Interconnection Point'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='irrigation_present',
            field=models.BooleanField(default=False, help_text='Is Irrigation connection present', verbose_name='Irrigation Present', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='is_backflow',
            field=models.BooleanField(default=False, help_text='Is Backflow present', verbose_name='Is Backflow Present', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='is_due_install',
            field=models.BooleanField(default=False, help_text='Is Due Install', verbose_name='Is Due Install', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='last_survey_date',
            field=models.DateField(help_text='Last Survey Date', null=True, verbose_name='Last Survey Date', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='meter_number',
            field=models.CharField(help_text='Meter Number', max_length=20, null=True, verbose_name='Meter Number', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='meter_reading',
            field=models.FloatField(help_text='Meter Reading', null=True, verbose_name='Meter Reading', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='meter_size',
            field=models.CharField(help_text='Meter Size', max_length=15, null=True, verbose_name='Meter Size', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='next_survey_date',
            field=models.DateField(help_text='Next Survey Date', null=True, verbose_name='Next Survey Date', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='notes',
            field=models.TextField(help_text='Notes', max_length=255, null=True, verbose_name='Notes', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='potable_present',
            field=models.BooleanField(default=False, help_text='Is Potable connection present', verbose_name='Potable Present', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='pws',
            field=models.ForeignKey(related_name='sites', verbose_name='PWS', to='webapp.PWS', help_text='PWS which Site belongs'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='route',
            field=models.CharField(help_text='Sequence Route', max_length=20, null=True, verbose_name='Seq. Route', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='site_type',
            field=models.ForeignKey(related_name='sites', blank=True, to='webapp.SiteType', help_text='Type of Site', null=True, verbose_name='Site Type'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='site_use',
            field=models.ForeignKey(related_name='sites', blank=True, to='webapp.SiteUse', help_text='Using of Site', null=True, verbose_name='Site Use'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='state',
            field=models.CharField(choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'DC', b'District of Columbia'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')], max_length=2, blank=True, help_text="Site's State", null=True, verbose_name='State'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='status',
            field=models.ForeignKey(related_name='sites', blank=True, to='webapp.SiteStatus', help_text="Site's Status", null=True, verbose_name='Status'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='street_number',
            field=models.CharField(help_text="Site Address's Street Number", max_length=100, null=True, verbose_name='Street Number', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='zip',
            field=models.CharField(help_text="Site's ZIP Code", max_length=10, null=True, verbose_name='ZIP', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='site',
            name='cust_number',
            field=models.CharField(help_text="Customer's Number", max_length=15, verbose_name='Number', db_index=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='site',
            unique_together=set([('pws', 'cust_number')]),
        ),
        migrations.CreateModel(
            name='Regulation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=50, verbose_name='Regulation Type')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'Regulation Type',
                'verbose_name_plural': 'Regulation Types',
                'permissions': ('browse_regulation', 'Can browse Regulation Type'),
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='hazard',
            name='latitude',
            field=models.FloatField(null=True, verbose_name='Latitude', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='longitude',
            field=models.FloatField(null=True, verbose_name='Longitude', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='photo',
            field=models.ImageField(default=None, upload_to=webapp.utils.photo_util.rename, null=True, verbose_name='Photo', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='photo_thumb',
            field=models.ImageField(default=None, upload_to=b'photo/thumb/', null=True, verbose_name='Photo Thumbnail', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='regulation_type',
            field=models.ForeignKey(related_name='hazards', verbose_name='Regulation', blank=True, to='webapp.Regulation', null=True),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='regulation',
            options={'ordering': ('name',), 'verbose_name': 'Regulation Type', 'verbose_name_plural': 'Regulation Types', 'permissions': (('browse_regulation', 'Can browse Regulation Type'),)},
        ),
        migrations.AddField(
            model_name='pws',
            name='price',
            field=models.DecimalField(default=Decimal('0'), verbose_name="Test's Price", max_digits=10, decimal_places=2, blank=True),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='lettertype',
            options={'ordering': ('letter_type',), 'verbose_name': 'Letter Type', 'verbose_name_plural': 'Letter Types', 'permissions': (('browse_lettertype', 'Can browse Letter Type'), ('access_to_all_lettertypes', 'Has access to all Letter Types'), ('access_to_pws_lettertypes', "Has access to PWS's Letter Types"))},
        ),
        migrations.AddField(
            model_name='lettertype',
            name='pws',
            field=models.ForeignKey(default=None, to='webapp.PWS', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='lettertype',
            unique_together=set([('letter_type', 'pws')]),
        ),
        migrations.AlterField(
            model_name='lettertype',
            name='pws',
            field=models.ForeignKey(related_name='letter_types', default=None, blank=True, to='webapp.PWS', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='consultant_name',
            field=models.CharField(max_length=100, null=True, verbose_name='Consultant Name', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='consultant_phone',
            field=models.CharField(max_length=50, null=True, verbose_name='Consultant Phone', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='plumber_packet_address',
            field=models.CharField(max_length=100, null=True, verbose_name='Plumber Packet Address', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='plumber_packet_location',
            field=models.CharField(max_length=100, null=True, verbose_name='Plumber Packet Location', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='logo',
            field=webapp.fields.ImageField(upload_to=b'pws_logos', null=True, verbose_name='Pws logo', blank=True),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='ImportLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('added_sites', models.ManyToManyField(related_name='added_imports', to=b'webapp.Site')),
                ('deactivated_sites', models.ManyToManyField(related_name='deactivated_imports', to=b'webapp.Site')),
                ('updated_sites', models.ManyToManyField(related_name='updated_imports', to=b'webapp.Site')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('pws', models.ForeignKey(to='webapp.PWS')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AlterModelOptions(
            name='importlog',
            options={'permissions': (('access_to_all_import_logs', 'Has access to all import logs'), ('access_to_pws_import_logs', "Has access to PWS's import logs"))},
        ),
        migrations.AlterModelOptions(
            name='importlog',
            options={'permissions': (('browse_import_log', 'Can browse Import Log'), ('access_to_all_import_logs', 'Has access to all Import Logs'), ('access_to_pws_import_logs', "Has access to PWS's Import Logs"))},
        ),
        migrations.AlterModelOptions(
            name='test',
            options={'ordering': ('-test_date', '-id'), 'verbose_name': 'Test', 'verbose_name_plural': 'Tests', 'permissions': (('browse_test', 'Can browse Test'), ('access_to_all_tests', 'Has access to all Tests'), ('access_to_pws_tests', "Has access to PWS's Tests"), ('access_to_own_tests', 'Has access to own Tests'))},
        ),
        migrations.AlterModelOptions(
            name='survey',
            options={'ordering': ('-survey_date', '-id'), 'get_latest_by': 'survey_date', 'verbose_name': 'Survey', 'verbose_name_plural': 'Surveys', 'permissions': (('browse_survey', 'Can browse Survey'), ('access_to_all_surveys', 'Has access to all Surveys'), ('access_to_pws_surveys', "Has access to PWS's Surveys"), ('access_to_own_surveys', 'Has access to own Surveys'))},
        ),
        migrations.AddField(
            model_name='importlog',
            name='progress',
            field=models.IntegerField(default=0),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='user',
            field=models.ForeignKey(related_name='added_tests', default=2, verbose_name='Who added test into System', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='employee',
            name='has_licence_for_installation',
            field=models.BooleanField(default=False, verbose_name='Determines whether tester has access for installation'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='paypal_payment_id',
            field=models.CharField(max_length=50, null=True, verbose_name='Paypal Payment ID', blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='test',
            name='test_date',
            field=models.DateField(default=datetime.date.today, verbose_name='Test Date'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='additives_present',
            field=models.BooleanField(default=False, verbose_name='Additives Present', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='aux_water',
            field=models.BooleanField(default=False, verbose_name='Auxiliary Water', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='cc_present',
            field=models.BooleanField(default=False, verbose_name='CC Present', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='pump_present',
            field=models.BooleanField(default=False, verbose_name='Pump Present', choices=[(True, b'Yes'), (False, b'No')]),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='pws',
            options={'ordering': ('number',), 'verbose_name': 'Public Water System', 'verbose_name_plural': 'Public Water Systems', 'permissions': (('browse_pws', 'Can browse Public Water System'), ('change_own_pws', 'Can change his own Public Water System'))},
        ),
        migrations.AlterField(
            model_name='test',
            name='air_inlet_psi',
            field=models.DecimalField(null=True, verbose_name='Air Inlet PSI', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='test',
            name='air_inlet_retest_psi',
            field=models.DecimalField(null=True, verbose_name='Air Inlet Retest PSI', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='test',
            name='cv1_gauge_pressure',
            field=models.DecimalField(null=True, verbose_name='CV1 Gauge Pressure', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.RemoveField(
            model_name='test',
            name='cv1_maintenance_pressure',
        ),
        migrations.AlterField(
            model_name='test',
            name='cv2_gauge_pressure',
            field=models.DecimalField(null=True, verbose_name='CV2 Gauge Pressure', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.RemoveField(
            model_name='test',
            name='cv2_maintenance_pressure',
        ),
        migrations.AlterField(
            model_name='test',
            name='cv_held_pressure',
            field=models.DecimalField(null=True, verbose_name='CV Held Pressure', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.RemoveField(
            model_name='test',
            name='cv_psi',
        ),
        migrations.AlterField(
            model_name='test',
            name='cv_retest_psi',
            field=models.DecimalField(null=True, verbose_name='CV Retest PSI', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.RemoveField(
            model_name='test',
            name='pvb_open_pressure',
        ),
        migrations.AlterField(
            model_name='test',
            name='rv_psi1',
            field=models.DecimalField(null=True, verbose_name='RV Pressure 1', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='test',
            name='rv_psi2',
            field=models.DecimalField(null=True, verbose_name='RV Pressure 2', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='bailee_job_title',
            field=models.CharField(default=b'Director of Public Works', max_length=100, verbose_name='Job title of person on whose behalf the letter will be sent'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='bailee_name',
            field=models.CharField(max_length=100, null=True, verbose_name='Name of Director of Public Works or other person on whose behalf the letter will be sent', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='email',
            field=models.EmailField(max_length=100, null=True, verbose_name="PWS's email", blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='fax',
            field=models.CharField(max_length=100, null=True, verbose_name="PWS's Fax number", blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='letter_left_header_block',
            field=ckeditor.fields.RichTextField(verbose_name='Letter Left Header block', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='letter_right_header_block',
            field=ckeditor.fields.RichTextField(verbose_name='Letter Right Header block', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='phone',
            field=models.CharField(max_length=100, null=True, verbose_name="PWS's Phone number", blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='zip',
            field=models.CharField(max_length=10, null=True, verbose_name='ZIP', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pws',
            name='state',
            field=models.CharField(choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'DC', b'District of Columbia'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')], max_length=2, blank=True, help_text="Site's State", null=True, verbose_name='State'),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='pws',
            options={'ordering': ('number',), 'verbose_name': 'Public Water System', 'verbose_name_plural': 'Public Water Systems', 'permissions': (('browse_pws', 'Can browse Public Water System'), ('browse_all_pws', 'Can browse all Public Water Systems'), ('change_own_pws', 'Can change his own Public Water System'))},
        ),
        migrations.AddField(
            model_name='hazard',
            name='bp_type_present',
            field=models.CharField(blank=True, max_length=15, null=True, verbose_name='BP Type Present', choices=[(b'Air Gap', b'Air Gap'), (b'AVB', b'AVB'), (b'DC', b'DC'), (b'DCDA', b'DCDA'), (b'HBVB', b'HBVB'), (b'PVB', b'PVB'), (b'RP', b'RP'), (b'RPDA', b'RPDA')]),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='hazard',
            name='bp_type_required',
            field=models.CharField(blank=True, max_length=15, null=True, verbose_name='BP Type Required', choices=[(b'Air Gap', b'Air Gap'), (b'AVB', b'AVB'), (b'DC', b'DC'), (b'DCDA', b'DCDA'), (b'HBVB', b'HBVB'), (b'PVB', b'PVB'), (b'RP', b'RP'), (b'RPDA', b'RPDA')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='hazard',
            name='bp_type_present',
            field=models.CharField(blank=True, max_length=15, null=True, verbose_name='BP Type Present', choices=[('Air Gap', 'Air Gap'), ('AVB', 'AVB'), ('DC', 'DC'), ('DCDA', 'DCDA'), ('HBVB', 'HBVB'), ('PVB', 'PVB'), ('RP', 'RP'), ('RPDA', 'RPDA'), ('SVB', 'SVB')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='hazard',
            name='bp_type_required',
            field=models.CharField(blank=True, max_length=15, null=True, verbose_name='BP Type Required', choices=[('Air Gap', 'Air Gap'), ('AVB', 'AVB'), ('DC', 'DC'), ('DCDA', 'DCDA'), ('HBVB', 'HBVB'), ('PVB', 'PVB'), ('RP', 'RP'), ('RPDA', 'RPDA'), ('SVB', 'SVB')]),
            preserve_default=True,
        ),
        migrations.AlterModelOptions(
            name='importlog',
            options={'verbose_name': 'Import Log', 'verbose_name_plural': 'Import Logs', 'permissions': (('browse_import_log', 'Can browse Import Log'), ('access_to_all_import_logs', 'Has access to all Import Logs'), ('access_to_pws_import_logs', "Has access to PWS's Import Logs"))},
        ),
        migrations.AlterModelOptions(
            name='statictext',
            options={'verbose_name': 'Static Text', 'verbose_name_plural': 'Static Texts'},
        ),
        migrations.AlterField(
            model_name='importlog',
            name='added_sites',
            field=models.ManyToManyField(related_name='added_imports', verbose_name='Added sites', to=b'webapp.Site'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='importlog',
            name='datetime',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Datetime of import'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='importlog',
            name='deactivated_sites',
            field=models.ManyToManyField(related_name='deactivated_imports', verbose_name='Deactivated sites', to=b'webapp.Site'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='importlog',
            name='progress',
            field=models.IntegerField(default=0, verbose_name='Progress of import'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='importlog',
            name='pws',
            field=models.ForeignKey(related_name='import_logs', verbose_name='PWS for which import was performed', to='webapp.PWS'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='importlog',
            name='updated_sites',
            field=models.ManyToManyField(related_name='updated_imports', verbose_name='Updated sites', to=b'webapp.Site'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='importlog',
            name='user',
            field=models.ForeignKey(related_name='import_logs', verbose_name='User who performed import', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.RemoveField(
            model_name='test',
            name='cv1_maintenance',
        ),
        migrations.RemoveField(
            model_name='test',
            name='cv2_maintenance',
        ),
        migrations.RemoveField(
            model_name='test',
            name='cv_maintenance',
        ),
        migrations.RemoveField(
            model_name='test',
            name='pvb_opened',
        ),
        migrations.RemoveField(
            model_name='test',
            name='rv_maintenance',
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_cv_assembly',
            field=models.BooleanField(default=False, verbose_name='CV Assembly'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_disk',
            field=models.BooleanField(default=False, verbose_name='Disk'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_lock_nuts',
            field=models.BooleanField(default=False, verbose_name='Lock Nuts'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_o_rings',
            field=models.BooleanField(default=False, verbose_name='O-Rings'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_other',
            field=models.BooleanField(default=False, verbose_name='Other'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_retainer',
            field=models.BooleanField(default=False, verbose_name='Retainer'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_rubber_parts_kit',
            field=models.BooleanField(default=False, verbose_name='Rubber Parts Kit'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_seat',
            field=models.BooleanField(default=False, verbose_name='Seat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_spring',
            field=models.BooleanField(default=False, verbose_name='Spring'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_detail_stem_guide',
            field=models.BooleanField(default=False, verbose_name='Stem/Guide'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv1_retest_gauge_pressure',
            field=models.DecimalField(null=True, verbose_name='CV1 Retest Gauge Pressure', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_cv_assembly',
            field=models.BooleanField(default=False, verbose_name='CV Assembly'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_disk',
            field=models.BooleanField(default=False, verbose_name='Disk'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_lock_nuts',
            field=models.BooleanField(default=False, verbose_name='Lock Nuts'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_o_rings',
            field=models.BooleanField(default=False, verbose_name='O-Rings'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_other',
            field=models.BooleanField(default=False, verbose_name='Other'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_retainer',
            field=models.BooleanField(default=False, verbose_name='Retainer'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_rubber_parts_kit',
            field=models.BooleanField(default=False, verbose_name='Rubber Parts Kit'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_seat',
            field=models.BooleanField(default=False, verbose_name='Seat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_spring',
            field=models.BooleanField(default=False, verbose_name='Spring'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_detail_stem_guide',
            field=models.BooleanField(default=False, verbose_name='Stem/Guide'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='cv2_retest_gauge_pressure',
            field=models.DecimalField(null=True, verbose_name='CV2 Retest Gauge Pressure', max_digits=10, decimal_places=1, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_disk_air_inlet',
            field=models.BooleanField(default=False, verbose_name='Disk, Air Inlet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_disk_check_valve',
            field=models.BooleanField(default=False, verbose_name='Disk, Check Valve'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_guide',
            field=models.BooleanField(default=False, verbose_name='Guide'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_o_rings',
            field=models.BooleanField(default=False, verbose_name='O-Rings'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_other',
            field=models.BooleanField(default=False, verbose_name='Other'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_rubber_parts_kit',
            field=models.BooleanField(default=False, verbose_name='Rubber Parts Kit'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_rv_assembly',
            field=models.BooleanField(default=False, verbose_name='RV Assembly'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_seat_check_valve',
            field=models.BooleanField(default=False, verbose_name='Seat, Check Valve'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_spring_air_inlet',
            field=models.BooleanField(default=False, verbose_name='Spring, Air Inlet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='pvb_detail_spring_check_valve',
            field=models.BooleanField(default=False, verbose_name='Spring, Check Valve'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_diaphragms',
            field=models.BooleanField(default=False, verbose_name='Diaphragm(s)'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_disk',
            field=models.BooleanField(default=False, verbose_name='Disk'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_guide',
            field=models.BooleanField(default=False, verbose_name='Guide'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_o_rings',
            field=models.BooleanField(default=False, verbose_name='O-Rings'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_other',
            field=models.BooleanField(default=False, verbose_name='Other'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_rubber_parts_kit',
            field=models.BooleanField(default=False, verbose_name='Rubber Parts Kit'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_rv_assembly',
            field=models.BooleanField(default=False, verbose_name='RV Assembly'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_seat',
            field=models.BooleanField(default=False, verbose_name='Seat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='test',
            name='rv_detail_spring',
            field=models.BooleanField(default=False, verbose_name='Spring'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='test',
            name='paid',
            field=models.BooleanField(default=False, verbose_name='Whether test paid?'),
            preserve_default=True,
        ),
    ]
